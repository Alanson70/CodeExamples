#include "StdAfx.h"
#include "ArgsDemcorrection.h"
#include "DEM.h"
#include "resource.h"
#include "DEM.h"



////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
Cdfi_Arguments* CreateArgsDemcorrection(CDFI* pDfi, IC_PARAM* pParam)
{
	return new CArgsDemcorrection();
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
CArgsDemcorrection::CArgsDemcorrection(void) //: CDEM_DATA()
{
	m_pDialog = NULL;
	
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
CArgsDemcorrection::~CArgsDemcorrection(void)
{
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


#define SRL_READ(parameter) {	memcpy(&parameter, p, sizeof(parameter));	p += sizeof(parameter); }
#define SRL_WRITE(parameter) {	memcpy( p, &parameter,sizeof(parameter));	p += sizeof(parameter); }

long CArgsDemcorrection::Serialize(void* pMemory, BOOL IsReading)
{
	long size = 0;
	BYTE *p = (BYTE*)pMemory;

	if(!pMemory)
	{
		size = GetSerializeSize( NULL, FALSE );
		return size;
	}
	else
	{
		if ( IsReading )
		{
			// read size
			SRL_READ(size);
			SRL_READ(m_Args);
		}
		else
		{
			size = GetSerializeSize(pMemory, IsReading);
			// write size
			SRL_WRITE(size);
			SRL_WRITE(m_Args);
		}
	}

	return long(p - (BYTE*)pMemory);
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
long CArgsDemcorrection::GetSerializeSize(void* pMemory, BOOL IsReading)
{
	long size = 0;
	if (!pMemory || !IsReading)
	{
		size = sizeof(m_Args) + sizeof(size);
	}
	else
	{
		memcpy(&size, pMemory, sizeof(size));
	}
	return size;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////